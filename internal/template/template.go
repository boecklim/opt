package template

import (
	"io"
	"opt/internal/registry"
	"text/template"
)

type Template struct {
	tmpl *template.Template
}

type Member struct {
	Name       string
	Type       string
	StructName string
}

type Data struct {
	PkgName         string
	StructName      string
	Members         []Member
	SrcPkgQualifier string
	Imports         []*registry.Package
}

// New returns a new instance of Template.
func New() (Template, error) {
	tmpl, err := template.New("opt").Funcs(templateFuncs).Parse(optTemplate)
	if err != nil {
		return Template{}, err
	}

	return Template{tmpl: tmpl}, nil
}

var optTemplate = `
// Code generated by opt; DO NOT EDIT.
// github.com/boecklim/opt

package {{.PkgName}}

import (
	{{- range .Imports}}
		{{. | ImportStatement}}
	{{- end}}
)

type Option func(i *{{.StructName}})

{{- range .Members}}

// With {{.Name}} of type {{.Type}}
func With{{.Name}}({{.Name}} {{.Type}}) Option {
	return func(s *{{.StructName}}) {
		s.{{.Name}} = {{.Name}}
	}
}

{{- end}}

func New(opts ...Option) *{{.StructName}} {
	newInstance := {{.StructName}}{}

		for _, opt := range opts {
			opt(&newInstance)
		}
		
		return &newInstance
}


`

func (t Template) Execute(w io.Writer, data Data) error {
	return t.tmpl.Execute(w, data)
}

var templateFuncs = template.FuncMap{
	"ImportStatement": func(imprt *registry.Package) string {
		if imprt.Alias == "" {
			return `"` + imprt.Path() + `"`
		}
		return imprt.Alias + ` "` + imprt.Path() + `"`
	},
}
