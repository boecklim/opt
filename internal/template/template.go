package template

import (
	"io"
	"text/template"

	"opt/internal/registry"
)

type Template struct {
	tmpl *template.Template
}

type Data struct {
	PkgName         string
	SrcPkgQualifier string
	Imports         []*registry.Package
	Mocks           []MockData
	StubImpl        bool
	SkipEnsure      bool
	WithResets      bool
}

// New returns a new instance of Template.
func New() (Template, error) {
	tmpl, err := template.New("opt").Parse(optTemplate)
	if err != nil {
		return Template{}, err
	}

	return Template{tmpl: tmpl}, nil
}

var optTemplate = `
// Code generated by opt; DO NOT EDIT.
// github.com/boecklim/opt

package {{.PkgName}}


type Option func(i *{{.StructName}})


func New(opts ...Option) *{{.StructName}} {
	newInstance := {{.StructName}}{}

		for _, opt := range opts {
			opt(&newInstance)
		}
		
		return &newInstance
}


`

func (t Template) Execute(w io.Writer, data Data) error {
	return t.tmpl.Execute(w, data)
}
